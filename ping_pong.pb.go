// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ping_pong.proto

package main

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "go.gazette.dev/core/broker/protocol"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Volley is a protobuf message representing a volley between game participants.
type Volley struct {
	Uuid                 []byte   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	GameId               int32    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	From                 int32    `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   int32    `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	Round                int32    `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Volley) Reset()         { *m = Volley{} }
func (m *Volley) String() string { return proto.CompactTextString(m) }
func (*Volley) ProtoMessage()    {}
func (*Volley) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc3b7dc6af2be2fc, []int{0}
}
func (m *Volley) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Volley) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Volley.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Volley) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volley.Merge(m, src)
}
func (m *Volley) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Volley) XXX_DiscardUnknown() {
	xxx_messageInfo_Volley.DiscardUnknown(m)
}

var xxx_messageInfo_Volley proto.InternalMessageInfo

func (m *Volley) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *Volley) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *Volley) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Volley) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Volley) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func init() {
	proto.RegisterType((*Volley)(nil), "ping_pong.Volley")
}

func init() { proto.RegisterFile("ping_pong.proto", fileDescriptor_fc3b7dc6af2be2fc) }

var fileDescriptor_fc3b7dc6af2be2fc = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xbf, 0x4a, 0xc4, 0x30,
	0x18, 0xc0, 0xc9, 0x5d, 0x5b, 0x31, 0x8a, 0x42, 0x38, 0x34, 0x76, 0x08, 0x87, 0xd3, 0x4d, 0x2d,
	0xe8, 0xe2, 0x2c, 0xfe, 0xc1, 0xf5, 0x0e, 0x1c, 0x5c, 0x8e, 0xf6, 0x92, 0x0b, 0xc1, 0x26, 0x5f,
	0x88, 0x89, 0xd0, 0xb7, 0xf1, 0x71, 0x1c, 0x7d, 0x86, 0xf3, 0x45, 0xa4, 0x49, 0xe9, 0xe2, 0x12,
	0x7e, 0xdf, 0xef, 0xf7, 0x0d, 0xf9, 0xf0, 0xb9, 0x55, 0x46, 0x6e, 0x2d, 0x18, 0x59, 0x59, 0x07,
	0x1e, 0xc8, 0xf1, 0x24, 0x4a, 0xd6, 0x3a, 0x78, 0x17, 0xae, 0x8e, 0x61, 0x07, 0xdd, 0x04, 0x69,
	0xb5, 0x64, 0xd6, 0xf7, 0x56, 0x7c, 0xd4, 0x3c, 0xb8, 0xc6, 0x2b, 0x30, 0x13, 0x8c, 0x9d, 0x8e,
	0x5d, 0x68, 0xeb, 0xfb, 0xf4, 0x8e, 0x65, 0x21, 0x41, 0x42, 0xc4, 0x7a, 0xa0, 0x64, 0xaf, 0x01,
	0x17, 0xaf, 0xd0, 0x75, 0xa2, 0x27, 0x04, 0x67, 0x21, 0x28, 0x4e, 0xd1, 0x12, 0xad, 0x4e, 0xd7,
	0x91, 0xc9, 0x25, 0x3e, 0x92, 0x8d, 0x16, 0x5b, 0xc5, 0xe9, 0x6c, 0x89, 0x56, 0xf9, 0xba, 0x18,
	0xc6, 0x17, 0x3e, 0x2c, 0xef, 0x1d, 0x68, 0x3a, 0x8f, 0x36, 0x32, 0x39, 0xc3, 0x33, 0x0f, 0x34,
	0x8b, 0x66, 0xe6, 0x81, 0x2c, 0x70, 0xee, 0x20, 0x18, 0x4e, 0xf3, 0xa8, 0xd2, 0x70, 0xf3, 0x8c,
	0x4f, 0x36, 0xa0, 0xc5, 0x46, 0xb8, 0x4f, 0xb5, 0x13, 0xe4, 0x0e, 0xcf, 0x9f, 0x00, 0xc8, 0x55,
	0x25, 0x01, 0x64, 0x27, 0xd2, 0xaf, 0xda, 0xb0, 0xaf, 0x1e, 0xc6, 0xbb, 0xca, 0x8b, 0x7f, 0xe9,
	0x71, 0xb8, 0xea, 0x9e, 0x7c, 0x1f, 0x18, 0xfa, 0x39, 0x30, 0xf4, 0xf5, 0xcb, 0xd0, 0x5b, 0xa6,
	0x1b, 0x65, 0xda, 0x22, 0xee, 0xdc, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x44, 0xa9, 0x08, 0x05,
	0x62, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SomeServiceClient is the client API for SomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SomeServiceClient interface {
	// Foo the bar.
	Foo(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error)
}

type someServiceClient struct {
	cc *grpc.ClientConn
}

func NewSomeServiceClient(cc *grpc.ClientConn) SomeServiceClient {
	return &someServiceClient{cc}
}

func (c *someServiceClient) Foo(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ping_pong.SomeService/Foo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeServiceServer is the server API for SomeService service.
type SomeServiceServer interface {
	// Foo the bar.
	Foo(context.Context, *duration.Duration) (*empty.Empty, error)
}

func RegisterSomeServiceServer(s *grpc.Server, srv SomeServiceServer) {
	s.RegisterService(&_SomeService_serviceDesc, srv)
}

func _SomeService_Foo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(duration.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeServiceServer).Foo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ping_pong.SomeService/Foo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeServiceServer).Foo(ctx, req.(*duration.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

var _SomeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ping_pong.SomeService",
	HandlerType: (*SomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Foo",
			Handler:    _SomeService_Foo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping_pong.proto",
}

func (m *Volley) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Volley) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPingPong(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPingPong(dAtA, i, uint64(m.GameId))
	}
	if m.From != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPingPong(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPingPong(dAtA, i, uint64(m.To))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPingPong(dAtA, i, uint64(m.Round))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPingPong(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Volley) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovPingPong(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovPingPong(uint64(m.GameId))
	}
	if m.From != 0 {
		n += 1 + sovPingPong(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovPingPong(uint64(m.To))
	}
	if m.Round != 0 {
		n += 1 + sovPingPong(uint64(m.Round))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPingPong(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPingPong(x uint64) (n int) {
	return sovPingPong(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Volley) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPingPong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volley: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volley: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPingPong
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPingPong
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = append(m.Uuid[:0], dAtA[iNdEx:postIndex]...)
			if m.Uuid == nil {
				m.Uuid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPingPong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPingPong
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPingPong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPingPong(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPingPong
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPingPong
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPingPong
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPingPong
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPingPong(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPingPong
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPingPong = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPingPong   = fmt.Errorf("proto: integer overflow")
)
